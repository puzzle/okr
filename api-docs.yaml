openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
security:
- bearerAuth: []
paths:
  /api/v2/units/{unitId}:
    put:
      tags:
      - unit-controller
      summary: Update a Unit
      description: Updates an existing unit with new details.
      operationId: updateUnit
      parameters:
      - name: unitId
        in: path
        description: ID of the unit to be updated.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Updated unit data in JSON format.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnitDto"
        required: true
      responses:
        "200":
          description: Unit successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitDto"
        "400":
          description: Invalid input data
        "404":
          description: Unit not found
    delete:
      tags:
      - unit-controller
      summary: Delete a Unit
      description: Deletes an existing unit by its ID.
      operationId: deleteUnitById
      parameters:
      - name: unitId
        in: path
        description: ID of the unit to be deleted.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Unit successfully deleted
        "404":
          description: Unit not found
  /api/v2/teams/{id}:
    put:
      tags:
      - team-controller
      summary: Update Team
      description: Update a Team by ID.
      operationId: updateTeam
      parameters:
      - name: id
        in: path
        description: The ID for updating a Team.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamDto"
        required: true
      responses:
        "200":
          description: Updated Team in db.
          content:
            application/json:
              schema:
                type: string
                allOf:
                - $ref: "#/components/schemas/TeamDto"
        "401":
          description: Not authorized to update a Team
        "404":
          description: Did not find a Team with a specified ID to update.
        "422":
          description: Can't update Team since Team was updated or deleted by another
            user.
    delete:
      tags:
      - team-controller
      summary: Delete Team by ID
      description: Delete Team by ID
      operationId: deleteTeamById
      parameters:
      - name: id
        in: path
        description: The ID of an Team to delete it.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Deleted Team by ID
        "401":
          description: Not authorized to delete an Team
        "404":
          description: Did not find the Team with requested ID
  /api/v2/teams/{id}/user/{userId}/updateaddteammembership/{isAdmin}:
    put:
      tags:
      - team-controller
      summary: Update or add team membership
      description: "If user is already member of this team, isAdmin is set. otherwise\
        \ new team membership is added with isAdmin true or false"
      operationId: updateOrAddTeamMembership
      parameters:
      - name: id
        in: path
        description: The ID of an team to update or add membership
        required: true
        schema:
          type: integer
          format: int64
      - name: userId
        in: path
        description: The User ID to update or add membership
        required: true
        schema:
          type: integer
          format: int64
      - name: isAdmin
        in: path
        description: The parameter if user should be admin or not
        required: true
        schema:
          type: boolean
      responses:
        "200":
          description: Update or add team membership
        "401":
          description: Not authorized to update or add team membership
        "404":
          description: Did not find the Team with requested ID
  /api/v2/teams/{id}/user/{userId}/removeuser:
    put:
      tags:
      - team-controller
      summary: Remove User from Team
      description: Remove User with given UserID from Team
      operationId: removeUserFromTeam
      parameters:
      - name: id
        in: path
        description: The ID of an team to remove the user from it.
        required: true
        schema:
          type: integer
          format: int64
      - name: userId
        in: path
        description: The User ID to remove from the team.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Removed User from Team
        "401":
          description: Not authorized to remove user from team
        "404":
          description: Did not find the Team with requested ID
  /api/v2/teams/{id}/addusers:
    put:
      tags:
      - team-controller
      summary: Add users to a team
      description: Add users to a team
      operationId: addUsersToTeam
      parameters:
      - name: id
        in: path
        description: The ID of an Team to add to users to it.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UserDto"
        required: true
      responses:
        "200":
          description: Added users to team
        "401":
          description: Not authorized to add users to the team
        "404":
          description: Did not find the Team with requested ID
  /api/v2/objectives/{id}:
    get:
      tags:
      - objective-controller
      summary: Get Objective
      description: Get an Objective by ID
      operationId: getObjective
      parameters:
      - name: id
        in: path
        description: The ID for getting an Objective.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Returned an Objective with a specified ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectiveDto"
        "401":
          description: Not authorized to read an Objective
        "404":
          description: Did not find an Objective with a specified ID
    put:
      tags:
      - objective-controller
      summary: Update Objective
      description: Update Objective by ID
      operationId: updateObjective
      parameters:
      - name: id
        in: path
        description: The ID for updating an Objective.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: The objective as json to update an existing Objective.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjectiveDto"
        required: true
      responses:
        "200":
          description: Updated Objective in db
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectiveDto"
        "226":
          description: Updated Objective in db but quarter was not changed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectiveDto"
        "400":
          description: "Can't create new Objective, attributes are not set or tried\
            \ to set quarter"
        "401":
          description: Not authorized to update an Objective
        "404":
          description: Given ID of Objective wasn't found
        "422":
          description: Can't update Objective since Objective was updated or deleted
            by another user.
    delete:
      tags:
      - objective-controller
      summary: Delete Objective by ID
      description: Delete Objective by ID
      operationId: deleteObjectiveById
      parameters:
      - name: id
        in: path
        description: The ID of an Objective to delete it.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Deleted Objective by ID
        "401":
          description: Not authorized to delete an Objective
        "404":
          description: Did not find the Objective with requested ID
  /api/v2/keyresults/{id}:
    get:
      tags:
      - key-result-controller
      summary: Get KeyResult by Id
      description: Get KeyResult by Id
      operationId: getKeyResultById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Got KeyResult by Id
          content:
            application/json:
              schema:
                type: string
                allOf:
                - $ref: "#/components/schemas/KeyResultMetricDto"
                - $ref: "#/components/schemas/KeyResultOrdinalDto"
        "401":
          description: Not authorized to read a KeyResult
        "404":
          description: Did not find the KeyResult with requested id
    put:
      tags:
      - key-result-controller
      summary: Update KeyResult
      description: Update a KeyResult by ID.
      operationId: updateKeyResult
      parameters:
      - name: id
        in: path
        description: The ID for updating a KeyResult.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeyResultDto"
        required: true
      responses:
        "200":
          description: Updated KeyResult in db.
          content:
            application/json:
              schema:
                type: string
                allOf:
                - $ref: "#/components/schemas/KeyResultDto"
                - $ref: "#/components/schemas/KeyResultOrdinalDto"
        "226":
          description: Updated KeyResult in db but keyResultType was not changed
          content:
            application/json:
              schema:
                type: string
                allOf:
                - $ref: "#/components/schemas/KeyResultDto"
        "401":
          description: Not authorized to update a KeyResult
        "404":
          description: Did not find a KeyResult with a specified ID to update.
        "422":
          description: Can't update KeyResult since KeyResult was updated or deleted
            by another user.
    delete:
      tags:
      - key-result-controller
      summary: Delete KeyResult by Id
      description: Delete KeyResult by Id
      operationId: deleteKeyResultById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Deleted KeyResult by Id
        "401":
          description: Not authorized to delete a KeyResult
        "404":
          description: Did not find the KeyResult with requested id
  /api/v2/checkins/{id}:
    get:
      tags:
      - check-in-controller
      summary: Get Check-in
      description: Get Check-in by ID
      operationId: getCheckInById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Returned a Check-in with a specified ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckInDto"
        "401":
          description: Not authorized to read Check-in
        "404":
          description: Did not find a Check-in with a specified ID
    put:
      tags:
      - check-in-controller
      summary: Update Check-in
      description: Update a Check-in by ID
      operationId: updateCheckIn
      parameters:
      - name: id
        in: path
        description: The ID for updating a Check-in.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: The Check-in as json to update an existing Check-in.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckInDto"
        required: true
      responses:
        "200":
          description: Updated Check-in in db
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckInDto"
        "400":
          description: "Can't create new Check-in, attributes are not set"
        "401":
          description: Not authorized to update Check-in
        "404":
          description: Given ID of Check-in wasn't found.
        "422":
          description: Can't update Check-in since Check-in was updated or deleted
            by another user.
    delete:
      tags:
      - check-in-controller
      summary: Delete Check-in by ID
      description: Delete Check-in by ID
      operationId: deleteCheckInById
      parameters:
      - name: id
        in: path
        description: The ID of an Check-in to delete it.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Deleted Check-in by ID
        "401":
          description: Not authorized to delete Check-in
        "404":
          description: Did not find the Check-in with requested ID
  /api/v2/action:
    put:
      tags:
      - action-controller
      summary: Update Actions
      description: Update Actions of KeyResult
      operationId: updateActions
      requestBody:
        description: The Action as json to update existing Actions.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ActionDto"
        required: true
      responses:
        "200":
          description: Updated Actions of KeyResult
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionDto"
        "400":
          description: "Can't update Actions, attributes are not set"
  /api/v1/users/{id}/isokrchampion/{isOkrChampion}:
    put:
      tags:
      - user-controller
      summary: Set OKR Champion property for user
      description: Sets the property okrChampion of user to true or false
      operationId: setOkrChampion
      parameters:
      - name: id
        in: path
        description: The ID for requested user.
        required: true
        schema:
          type: integer
          format: int64
      - name: isOkrChampion
        in: path
        description: okrChampion property of user is set to this flag.
        required: true
        schema:
          type: boolean
      responses:
        "200":
          description: Returned user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
  /api/v2/units:
    get:
      tags:
      - unit-controller
      summary: Get All Units
      description: Retrieves a list of all available units.
      operationId: getAllUnits
      responses:
        "200":
          description: Successfully retrieved all units
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitDto"
    post:
      tags:
      - unit-controller
      summary: Create a Unit
      description: Creates a new unit with the provided details.
      operationId: createUnit
      requestBody:
        description: Unit data in JSON format.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnitDto"
        required: true
      responses:
        "201":
          description: Unit successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitDto"
        "400":
          description: Invalid input data
  /api/v2/teams:
    get:
      tags:
      - team-controller
      summary: Get Teams
      description: Get all Teams from db
      operationId: getAllTeams
      responses:
        "200":
          description: Returned all Teams
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamDto"
    post:
      tags:
      - team-controller
      summary: Create Team
      description: Create a new Team
      operationId: createTeam
      requestBody:
        description: The Team as json to create a new Team.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamDto"
        required: true
      responses:
        "201":
          description: Created new Team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamDto"
        "400":
          description: "Can't create new Team, not allowed to give an ID"
        "401":
          description: Not authorized to create a Team
  /api/v2/objectives:
    post:
      tags:
      - objective-controller
      summary: Create Objective
      description: Create a new Objective
      operationId: createObjective
      requestBody:
        description: The Objective as json to create a new Objective.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjectiveDto"
        required: true
      responses:
        "201":
          description: Created new Objective
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectiveDto"
        "400":
          description: "Can't create new Objective, not allowed to give an ID"
        "401":
          description: Not authorized to create an Objective
  /api/v2/objectives/duplicate:
    post:
      tags:
      - objective-controller
      summary: Duplicate Objective
      description: Duplicate a given Objective
      operationId: duplicateObjective
      requestBody:
        description: The Objective which should be duplicated as JSON
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DuplicateObjectiveDto"
        required: true
      responses:
        "201":
          description: Duplicated a given Objective
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectiveDto"
  /api/v2/keyresults:
    post:
      tags:
      - key-result-controller
      summary: Create KeyResult
      description: Create a new KeyResult.
      operationId: createKeyResult
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeyResultDto"
        required: true
      responses:
        "201":
          description: Created new KeyResult.
          content:
            application/json:
              schema:
                type: string
                allOf:
                - $ref: "#/components/schemas/KeyResultDto"
                - $ref: "#/components/schemas/KeyResultOrdinalDto"
        "401":
          description: Not authorized to create a KeyResult
        "404":
          description: Did not find an Objective on which the KeyResult tries to refer
            to.
  /api/v2/completed:
    post:
      tags:
      - completed-controller
      summary: Create Completed
      description: Create a new Completed Reference.
      operationId: createCompleted
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompletedDto"
        required: true
      responses:
        "201":
          description: Created new Completed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Completed"
        "401":
          description: Not authorized to create Completed Reference
        "404":
          description: Could not create Completed Reference
  /api/v2/checkins:
    post:
      tags:
      - check-in-controller
      summary: Create Check-in
      description: Create a new Check-in
      operationId: createCheckIn
      requestBody:
        description: The Check-in as json to create a new Check-in.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckInDto"
        required: true
      responses:
        "201":
          description: Created new Check-in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckInDto"
        "400":
          description: "Can't create new Check-in, not allowed to give an ID"
        "401":
          description: Not authorized to create Check-in
  /api/v2/caches/emptyAuthorizationUsersCache:
    post:
      tags:
      - cache-controller
      summary: Delete authorization users cache
      description: Delete authorization users cache
      operationId: emptyAuthorizationUsersCache
      responses:
        "200":
          description: Authorization users cache deleted
  /api/v2/caches/emptyAllCaches:
    post:
      tags:
      - cache-controller
      summary: Delete all caches
      description: Delete all caches
      operationId: emptyAllCaches
      responses:
        "200":
          description: All caches deleted
  /api/v1/users/createall:
    post:
      tags:
      - user-controller
      summary: Create users
      description: Creates a user entity for every user in the method body
      operationId: createUsers
      requestBody:
        description: The users to create
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/NewUserDto"
        required: true
      responses:
        "200":
          description: Returned users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
  /api/v2/units/user:
    get:
      tags:
      - unit-controller
      summary: Get Units by User
      description: Retrieves a list of units associated with the currently authenticated
        user.
      operationId: getUnitsByUser
      responses:
        "200":
          description: Successfully retrieved user's units
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitDto"
  /api/v2/quarters:
    get:
      tags:
      - quarter-controller
      summary: Get quarters
      description: Get a List of quarters depending on current date
      operationId: getCurrentQuarters
      responses:
        "200":
          description: Returned a List of quarters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quarter"
  /api/v2/quarters/current:
    get:
      tags:
      - quarter-controller
      summary: Get current quarter
      description: Get the current quarter depending on current date
      operationId: getCurrentQuarter
      responses:
        "200":
          description: Returned the current quarter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quarter"
  /api/v2/overview:
    get:
      tags:
      - overview-controller
      summary: Get all teams and their objectives
      description: Get a List of teams with their objectives
      operationId: getOverview
      parameters:
      - name: team
        in: query
        required: false
        schema:
          type: array
          default: []
          items:
            type: integer
            format: int64
      - name: quarter
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: objectiveQuery
        in: query
        required: false
        schema:
          type: string
          default: ""
      responses:
        "200":
          description: Returned a List of teams and their objectives
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OverviewDto"
        "400":
          description: Can't return list of teams with their objectives
        "401":
          description: Not authorized to read teams with their objectives
        "404":
          description: The quarter or one of the teams were not found
  /api/v2/objectives/{id}/keyResults:
    get:
      tags:
      - objective-controller
      summary: Get KeyResults from Objective
      description: Get all KeyResults from one Objective by ObjectiveId.
      operationId: getKeyResultsFromObjective
      parameters:
      - name: id
        in: path
        description: The ID for getting all KeyResults of an Objective
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Returned all KeyResults from Objective.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckInDto"
        "401":
          description: Not authorized to read KeyResults from an Objective
        "404":
          description: Did not find an Objective with the specified ID to get KeyResults
            from.
  /api/v2/keyresults/{id}/checkins:
    get:
      tags:
      - key-result-controller
      summary: Get Check-ins from KeyResult
      description: Get all Check-ins from one KeyResult by keyResultId.
      operationId: getCheckInsFromKeyResult
      parameters:
      - name: id
        in: path
        description: The ID for getting all Check-ins from a KeyResult.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Returned all Check-ins from KeyResult.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckInDto"
        "401":
          description: Not authorized to read Check-ins from a KeyResult
        "404":
          description: Did not find a KeyResult with a specified ID to get Check-ins
            from.
  /api/v2/completed/{objectiveId}:
    get:
      tags:
      - completed-controller
      summary: Get Completed by Objective Id
      description: Get Completed from one Objective by objectiveId.
      operationId: getCompletedByObjectiveId
      parameters:
      - name: objectiveId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Returned Completed by Objective Id
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CompletedDto"
        "401":
          description: Not authorized to get Completed Reference
        "404":
          description: Did not find the Completed with requested Objective id
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CompletedDto"
    delete:
      tags:
      - completed-controller
      summary: Delete Completed by Objective Id
      description: Delete Completed Reference by Objective Id
      operationId: deleteCompletedByObjectiveId
      parameters:
      - name: objectiveId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Deleted Completed by Objective Id
        "401":
          description: Not authorized to delete Completed Reference
        "404":
          description: Did not find the Completed with requested Objective id
  /api/v2/alignments/selections:
    get:
      tags:
      - alignment-controller
      summary: Get all objectives and their key results to select the alignment
      description: Get a list of objectives with their key results to select the alignment
      operationId: getAlignmentSelections
      parameters:
      - name: quarter
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: team
        in: query
        required: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Returned a list of objectives with their key results to select
            the alignment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlignmentObjectiveDto"
        "400":
          description: Can't return list of objectives with their key results to select
            the alignment
  /api/v1/users:
    get:
      tags:
      - user-controller
      summary: Get Users
      description: Get all Users from db.
      operationId: getAllUsers
      responses:
        "200":
          description: Returned all Users.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
  /api/v1/users/{id}:
    get:
      tags:
      - user-controller
      summary: Get User by ID
      description: Get user by given ID.
      operationId: getUserById
      parameters:
      - name: id
        in: path
        description: The ID for requested user.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Returned user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
    delete:
      tags:
      - user-controller
      summary: Delete User by Id
      description: Delete User by Id
      operationId: deleteUserById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Deleted User by Id
        "401":
          description: Not authorized to delete a User
        "404":
          description: Did not find the User with requested id
  /api/v1/users/{id}/userokrdata:
    get:
      tags:
      - user-controller
      summary: Get User OKR Data
      description: Get User OKR Data
      operationId: getUserOkrData
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Returned User OKR Data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserOkrDataDto"
  /api/v1/users/{id}/ismemberofteams:
    get:
      tags:
      - user-controller
      summary: Check if User is member of Teams
      description: Check if User is member of any Team.
      operationId: isUserMemberOfTeams
      parameters:
      - name: id
        in: path
        description: The ID of the user.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: true if user is member of a Team
          content:
            application/json:
              schema:
                type: boolean
  /api/v1/users/current:
    get:
      tags:
      - user-controller
      summary: Get Current User
      description: Get all current logged in user.
      operationId: getCurrentUser
      responses:
        "200":
          description: Returned current logged in user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
  /api/v2/action/{actionId}:
    delete:
      tags:
      - action-controller
      summary: Delete Action by Id
      description: Delete Action by Id
      operationId: deleteActionById
      parameters:
      - name: actionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Deleted Action by Id
        "404":
          description: Did not find the Action with requested id
components:
  schemas:
    TeamDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        version:
          type: integer
          format: int32
        name:
          type: string
        isWriteable:
          type: boolean
    UnitDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        unitName:
          type: string
        owner:
          $ref: "#/components/schemas/UserDto"
        isDefault:
          type: boolean
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        version:
          type: integer
          format: int32
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        userTeamList:
          type: array
          items:
            $ref: "#/components/schemas/UserTeamDto"
        isOkrChampion:
          type: boolean
    UserTeamDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        version:
          type: integer
          format: int32
        team:
          $ref: "#/components/schemas/TeamDto"
        isTeamAdmin:
          type: boolean
    ObjectiveDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        version:
          type: integer
          format: int32
        title:
          type: string
        teamId:
          type: integer
          format: int64
        quarterId:
          type: integer
          format: int64
        description:
          type: string
        state:
          type: string
          enum:
          - SUCCESSFUL
          - NOTSUCCESSFUL
          - ONGOING
          - DRAFT
        createdOn:
          type: string
          format: date-time
        modifiedOn:
          type: string
          format: date-time
        isWriteable:
          type: boolean
    ActionDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        version:
          type: integer
          format: int32
        action:
          type: string
        priority:
          type: integer
          format: int32
        isChecked:
          type: boolean
        keyResultId:
          type: integer
          format: int64
        isWriteable:
          type: boolean
    KeyResultDto:
      type: object
      properties:
        actionList:
          type: array
          items:
            $ref: "#/components/schemas/ActionDto"
    KeyResultLastCheckInOrdinalDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        version:
          type: integer
          format: int32
        zone:
          type: string
          enum:
          - FAIL
          - COMMIT
          - TARGET
          - STRETCH
        confidence:
          type: integer
          format: int32
        createdOn:
          type: string
          format: date-time
        changeInfo:
          type: string
        initiatives:
          type: string
    KeyResultObjectiveDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        state:
          type: string
        keyResultQuarterDto:
          $ref: "#/components/schemas/KeyResultQuarterDto"
    KeyResultOrdinalDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        version:
          type: integer
          format: int32
        keyResultType:
          type: string
        title:
          type: string
        description:
          type: string
        commitZone:
          type: string
        targetZone:
          type: string
        stretchZone:
          type: string
        owner:
          $ref: "#/components/schemas/KeyResultUserDto"
        objective:
          $ref: "#/components/schemas/KeyResultObjectiveDto"
        lastCheckIn:
          $ref: "#/components/schemas/KeyResultLastCheckInOrdinalDto"
        createdOn:
          type: string
          format: date-time
        modifiedOn:
          type: string
          format: date-time
        isWriteable:
          type: boolean
        actionList:
          type: array
          items:
            $ref: "#/components/schemas/ActionDto"
    KeyResultQuarterDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
    KeyResultUserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
    CheckInDto:
      type: object
    DuplicateObjectiveDto:
      type: object
      properties:
        objective:
          $ref: "#/components/schemas/ObjectiveDto"
        keyResultIds:
          type: array
          items:
            type: integer
            format: int64
    CompletedDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        objective:
          $ref: "#/components/schemas/ObjectiveDto"
        comment:
          type: string
    Completed:
      type: object
      properties:
        id:
          type: integer
          format: int64
        version:
          type: integer
          format: int32
        objective:
          $ref: "#/components/schemas/Objective"
        comment:
          type: string
          maxLength: 4096
          minLength: 0
      required:
      - objective
    Objective:
      type: object
      properties:
        id:
          type: integer
          format: int64
        version:
          type: integer
          format: int32
        title:
          type: string
          maxLength: 250
          minLength: 2
        state:
          type: string
          enum:
          - SUCCESSFUL
          - NOTSUCCESSFUL
          - ONGOING
          - DRAFT
        description:
          type: string
          maxLength: 4096
          minLength: 0
        team:
          $ref: "#/components/schemas/Team"
        quarter:
          $ref: "#/components/schemas/Quarter"
        createdBy:
          $ref: "#/components/schemas/User"
        createdOn:
          type: string
          format: date-time
        modifiedOn:
          type: string
          format: date-time
        modifiedBy:
          $ref: "#/components/schemas/User"
        writeable:
          type: boolean
      required:
      - createdBy
      - createdOn
      - quarter
      - state
      - team
      - title
    Quarter:
      type: object
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        backlogQuarter:
          type: boolean
      required:
      - label
    Team:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 250
          minLength: 2
        version:
          type: integer
          format: int32
        userTeamList:
          type: array
          items:
            $ref: "#/components/schemas/UserTeam"
        writeable:
          type: boolean
      required:
      - name
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        version:
          type: integer
          format: int32
        firstName:
          type: string
          maxLength: 50
          minLength: 2
        lastName:
          type: string
          maxLength: 50
          minLength: 2
        email:
          type: string
          maxLength: 250
          minLength: 2
        userTeamList:
          type: array
          items:
            $ref: "#/components/schemas/UserTeam"
        okrChampion:
          type: boolean
        fullName:
          type: string
      required:
      - email
      - firstName
      - lastName
    UserTeam:
      type: object
      properties:
        id:
          type: integer
          format: int64
        version:
          type: integer
          format: int32
        user:
          $ref: "#/components/schemas/User"
        team:
          $ref: "#/components/schemas/Team"
        teamAdmin:
          type: boolean
    NewUserDto:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    OverviewDto:
      type: object
      properties:
        team:
          $ref: "#/components/schemas/OverviewTeamDto"
        objectives:
          type: array
          items:
            $ref: "#/components/schemas/OverviewObjectiveDto"
        isWriteable:
          type: boolean
    OverviewKeyResultDto:
      type: object
    OverviewObjectiveDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        state:
          type: string
          enum:
          - SUCCESSFUL
          - NOTSUCCESSFUL
          - ONGOING
          - DRAFT
        quarter:
          $ref: "#/components/schemas/OverviewQuarterDto"
        keyResults:
          type: array
          items:
            $ref: "#/components/schemas/OverviewKeyResultDto"
    OverviewQuarterDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
        isBacklogQuarter:
          type: boolean
    OverviewTeamDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    KeyResultLastCheckInMetricDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        version:
          type: integer
          format: int32
        value:
          type: number
          format: double
        confidence:
          type: integer
          format: int32
        createdOn:
          type: string
          format: date-time
        changeInfo:
          type: string
        initiatives:
          type: string
    KeyResultMetricDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        version:
          type: integer
          format: int32
        keyResultType:
          type: string
        title:
          type: string
        description:
          type: string
        baseline:
          type: number
          format: double
        stretchGoal:
          type: number
          format: double
        unit:
          $ref: "#/components/schemas/UnitDto"
        owner:
          $ref: "#/components/schemas/KeyResultUserDto"
        objective:
          $ref: "#/components/schemas/KeyResultObjectiveDto"
        lastCheckIn:
          $ref: "#/components/schemas/KeyResultLastCheckInMetricDto"
        createdOn:
          type: string
          format: date-time
        modifiedOn:
          type: string
          format: date-time
        isWriteable:
          type: boolean
        actionList:
          type: array
          items:
            $ref: "#/components/schemas/ActionDto"
    AlignmentKeyResultDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
    AlignmentObjectiveDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        keyResults:
          type: array
          items:
            $ref: "#/components/schemas/AlignmentKeyResultDto"
    UserKeyResultDataDto:
      type: object
      properties:
        keyResultId:
          type: integer
          format: int64
        keyResultName:
          type: string
        objectiveId:
          type: integer
          format: int64
        objectiveName:
          type: string
    UserOkrDataDto:
      type: object
      properties:
        keyResults:
          type: array
          items:
            $ref: "#/components/schemas/UserKeyResultDataDto"
  securitySchemes:
    bearerAuth:
      type: http
      name: bearerAuth
      scheme: bearer
      bearerFormat: JWT

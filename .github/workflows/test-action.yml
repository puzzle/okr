name: 'Show Variables' # Original name maintained

on:
  workflow_dispatch:
    inputs:
      deployment_type:
        type: choice
        description: Select type of deployment
        options:
          - Release from Commit
          - Major
          - Minor
          - Patch
        default: 'Release from Commit'
      commit_hash:
        description: 'The hash of thee commit that should be deployed, defaults to the latest commit on main'
        required: false
        type: string

      deployment_environment:
        type: choice
        required: true
        description: On which environment should the deployment be done?
        options:
          - 'No deployment (only build)'
          - PROD
          - STAGING
          - DEMO
        default: 'No deployment (only build)'


jobs:
  debug:
    runs-on: ubuntu-24.04
    env:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }} # Kept for consistency if needed elsewhere, though not used in this job
    steps:
      - name: Try to show GitHub Variables # Renamed step for clarity based on original name
        run: |
          echo "deployment_type input is ${{ github.event.inputs.deployment_type }}" # Use input directly
          echo "commit_hash input is ${{ github.event.inputs.commit_hash }}" # Use input directly
          echo "deployment env input is ${{ github.event.inputs.deployment_environment }}" # Use input directly


  get-e2e-files:
    runs-on: ubuntu-24.04
    outputs:
      file_list: ${{ steps.generate-file-list.outputs.file_list }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate file list
        id: generate-file-list
        run: |
          FILES=$(ls frontend/cypress/e2e | jq -R . | jq -s . | jq -c)
          echo $FILES
          echo "file_list=$FILES" >> $GITHUB_OUTPUT

  # --- Replaced find-commit, update-version, read-version ---
  versioning:
    # Using the reusable workflow
    uses: ./.github/workflows/reusable__generate-version.yml
    # Define necessary permissions for the reusable workflow's jobs (like push)
    permissions:
      packages: write
      id-token: write
      contents: write
      attestations: write
    with:
      # Pass the combined strategy or hash input
      version_strategy_or_hash: ${{ github.event.inputs.deployment_type == 'Release from Commit' && github.event.inputs.commit_hash || github.event.inputs.deployment_type }}
    secrets:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  build-docker-image:
    # Update dependency: now needs 'versioning' instead of 'read-version'
    needs: [versioning]
    runs-on: ubuntu-24.04
    env: # Define BRANCH_NAME if needed within this job's steps
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          # Checkout the branch head. Assumes 'versioning' pushed updates if needed.
          ref: ${{ env.BRANCH_NAME }}

      - name: Set up JDK ${{vars.JAVA_VERSION}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{vars.JAVA_VERSION}}
          distribution: 'adopt'

      - name: Set up node ${{vars.NODE_VERSION}}
        uses: actions/setup-node@v4
        with:
          node-version: ${{vars.NODE_VERSION}}

      - name: Install Dependencies
        run: cd ./frontend && npm ci

      - name: Build frontend with Angular
        run: cd ./frontend && npm run build

      - name: Build backend with Maven
        run: mvn -B clean package --file pom.xml -P build-for-docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build the docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          # Use output from the 'versioning' job
          tags: ${{ needs.versioning.outputs.FULL_IMAGE_TAG }}
          load: true
          push: false
          outputs: type=docker,dest=/tmp/okr-docker-image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: okr-image
          path: /tmp/okr-docker-image.tar
      - name: print imagetags
        run: echo ${{ needs.versioning.outputs.FULL_IMAGE_TAG }}


  e2e:
    needs: [build-docker-image, versioning]
    uses: ./.github/workflows/reusable__e2e-testing.yml
    with:
      DOCKER_IMAGE_TAG: ${{ needs.versioning.outputs.FULL_IMAGE_TAG }}



  upload-to-quay:
    runs-on: ubuntu-latest
    needs:
      # Update dependencies
      - e2e
      - versioning # Needed for image tag
    steps:
      - name: Checkout project # Keep checkout if needed for context, otherwise maybe removable
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: okr-image
          path: /tmp

      - name: Load image
        run: docker load --input /tmp/okr-docker-image.tar

      - name: show images
        run: docker image ls -a

      - name: Log in to Quay registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.QUAY_REGISTRY }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Push
        # Use output from the 'versioning' job
        run: docker push ${{ needs.versioning.outputs.FULL_IMAGE_TAG }}

  deploy-release:
    runs-on: ubuntu-latest
    # Corrected original 'deployment' to 'deployment_environment' based on input definition
    if: github.event.inputs.deployment_environment != 'No deployment (only build)'
    environment: ${{ github.event.inputs.deployment_environment }}
    needs:
      # Update dependencies
      - upload-to-quay
      - versioning # Needed for image tag
    env:
      BRANCH_NAME: main # Kept as original
      COMMITER_EMAIL: actions@gitlab.com # Kept as original
      COMMITTER_NAME: GitLab Actions # Kept as original
      OVERLAY_ROOT_PATH: deployments/overlays # Kept as original
      INSTANCE_NAME: ${{vars.INFRA_OVERLAY_FOLDER}} # Kept as original
      # Use output from the 'versioning' job
      IMAGE_NAME: ${{ needs.versioning.outputs.FULL_IMAGE_TAG }}
    steps:
      - name: show vars
        run: |
          # Use input directly for environment
          echo "env: ${{ github.event.inputs.deployment_environment }}"
          echo "folder: ${{ vars.INFRA_OVERLAY_FOLDER }}"
          echo "image: ${{ env.IMAGE_NAME }}" # Show the image tag being used

      - name: Checkout repository # Renamed step for clarity
        run: |
          # Assuming secrets.GITLAB_ACCESS_TOKEN and vars.* are defined correctly
          git clone https://oauth2:${{ secrets.GITLAB_ACCESS_TOKEN }}@${{vars.PUZZLE_GITLAB_FQDN}}/${{vars.OKR_INFRA_REPOSITORY_PATH}}.git okr-infra
          cd okr-infra
          git checkout ${{env.BRANCH_NAME}}

      - uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: '4.0.0' # Explicit version

      - name: Update Kustomization # Added name to run step
        run: |
          pwd
          cd okr-infra/${{env.OVERLAY_ROOT_PATH}}/${{env.INSTANCE_NAME}}
          kustomize edit set image ${{env.IMAGE_NAME}}

      - name: Commit and push # Kept original step name
        run: |
          # Navigate back to repo root relative to checkout dir
          cd okr-infra
          git config user.email "${{env.COMMITER_EMAIL}}"
          git config user.name "${{env.COMMITTER_NAME}}"
          # Add only the specific kustomization file
          git add ${{env.OVERLAY_ROOT_PATH}}/${{env.INSTANCE_NAME}}/kustomization.yaml
          # Check for changes before committing
          if git diff --staged --quiet; then
            echo "No changes detected in kustomization.yaml."
          else
            git commit -m "Update image tag of ${{env.INSTANCE_NAME}} to ${{env.IMAGE_NAME}}"
            git pull --rebase origin ${{ env.BRANCH_NAME }} # Ensure branch is up-to-date before push
            git push origin ${{ env.BRANCH_NAME }}
          fi


  create-release:
    runs-on: ubuntu-24.04
    # Corrected original 'deployment' to 'deployment_environment' based on input definition
    if: github.event.inputs.deployment_environment != 'No deployment (only build)'
    needs:
      # Update dependencies
      - deploy-release
      - versioning # Needed for semantic version
    env:
      # Use output from the 'versioning' job
      TAG_NAME: ${{ needs.versioning.outputs.SEMVER_VERSION }}
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }} # Use the branch the workflow is running on
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Checkout the branch head. This assumes any version bump commit
          # from the 'versioning' job has been pushed and is available.
          ref: ${{ env.BRANCH_NAME }}
          # Fetch all history and tags for release notes generation
          fetch-depth: 0

      - name: Create git tag
        run: |
          echo "Attempting to create tag ${{ env.TAG_NAME }}"
          # Avoid error if tag already exists
          if git rev-parse ${{ env.TAG_NAME }} >/dev/null 2>&1; then
             echo "Tag ${{ env.TAG_NAME }} already exists."
          else
             git tag ${{ env.TAG_NAME }}
             echo "Tag ${{ env.TAG_NAME }} created."
          fi

      - name: Push git tag
        run: |
          # Only push if the tag was newly created or needs pushing
          if git rev-parse ${{ env.TAG_NAME }} >/dev/null 2>&1; then
            # Check if the tag exists remotely
            if git ls-remote --tags origin | grep -q "refs/tags/${{ env.TAG_NAME }}$"; then
              echo "Tag ${{ env.TAG_NAME }} already exists remotely."
            else
              echo "Pushing tag ${{ env.TAG_NAME }}"
              git push origin ${{ env.TAG_NAME }}
            fi
          else
            echo "Tag ${{ env.TAG_NAME }} was not found locally, cannot push."
            # Optionally exit with error: exit 1
          fi

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # No need for 'tag: ${{ github.ref_name }}' here, gh release uses the tag specified
        run: |
          echo "Creating GitHub release for tag ${{ env.TAG_NAME }}"
          # Check if release already exists for this tag
          if gh release view "${{ env.TAG_NAME }}" --repo "$GITHUB_REPOSITORY" > /dev/null 2>&1; then
            echo "Release for tag ${{ env.TAG_NAME }} already exists."
          else
            gh release create "${{ env.TAG_NAME }}" \
                --repo="$GITHUB_REPOSITORY" \
                --title="Release ${GITHUB_REPOSITORY#*/} ${{ env.TAG_NAME }}" \
                --generate-notes
          fi
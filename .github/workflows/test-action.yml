name: 'Show Variables'

on:
  workflow_dispatch:
    inputs:
      deployment_type:
        type: choice
        description: Select type of deployment
        options:
          - Major
          - Minor
          - Patch
          - Release from Commit
      commit_hash:
        description: 'The hash of thee commit that should be deployed, defaults to the latest commit on main'
        required: false
        type: string

jobs:
  debug:
    runs-on: ubuntu-24.04
    env:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    steps:
      - name: Try to show GitHub Variables
        run: |
          echo "deployment_type is ${{ github.event.inputs.deployment_type }}" / ${{ inputs.deployment_type }}
          echo "commit_hash is ${{ github.event.inputs.commit_hash }}" / ${{ inputs.commit_hash }}

  find-commit:
    runs-on: ubuntu-24.04
    outputs:
      SEMVER_VERSION: "${{ env.SEMVER_VERSION }}"
#      NEW_IMAGE_TAG: "${{ env.SEMVER_VERSION }}-${{ env.SHORT_COMMIT_HASH }}"
      COMMIT_HASH: "${{ env.COMMIT_HASH }}"
    env:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Stores the commit hash as environment variable
        run: |
          commit_hash=$(./scripts/get-commit.sh ${{ env.BRANCH_NAME }} ${{ github.event.inputs.commit_hash }})
          echo "Commit is set to \"$commit_hash\""
          echo "COMMIT_HASH=$commit_hash" >> $GITHUB_ENV
          echo "SHORT_COMMIT_HASH=$(git rev-parse --short $commit_hash)" >> $GITHUB_ENV

      - name: Accessing the environment variable
        run: |
          echo "${{ env.SHORT_COMMIT_HASH }}"
      

  update-version:
    runs-on: ubuntu-24.04
    needs: find-commit
    if: github.event.inputs.deployment_type != 'Release from Commit'
    outputs:
      SEMVER_VERSION: "${{ env.SEMVER_VERSION }}"
    env:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.find-commit.outputs.COMMIT_HASH }}

      - name: Update version
        run: ./scripts/update-mvn-version.sh "${{ github.event.inputs.deployment_type }}"

      - name: Commit and Push Changes
        shell: bash
        env:
          COMMITPREFIX: '[VU]'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add . || {
            echo "No files were changed, so we did not commit anything"
            exit 1
          }
          git commit -m "$COMMITPREFIX Automated version update" || {
            echo "No changes to commit, skipping push"
            exit 0
          }
          git push -f origin ${{ env.BRANCH_NAME }}

     

  read-version:
    runs-on: ubuntu-24.04
    needs: update-version
    permissions:
      packages: write
      id-token: write
      contents: write
      attestations: write
    outputs:
      SEMVER_VERSION: "${{ env.SEMVER_VERSION }}"
      NEW_IMAGE_TAG: "${{ env.SEMVER_VERSION }}-${{ env.SHORT_COMMIT_HASH }}"
      COMMIT_HASH: "${{ env.COMMIT_HASH }}"
    env:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    steps:
      - name: read version
        run: echo "SEMVER_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec | sed 's/-SNAPSHOT$//')" >> $GITHUB_ENV

  build-docker-image:
    needs: read-version
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK ${{vars.JAVA_VERSION}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{vars.JAVA_VERSION}}
          distribution: 'adopt'

      - name: Set up node ${{vars.NODE_VERSION}}
        uses: actions/setup-node@v4
        with:
          node-version: ${{vars.NODE_VERSION}}

      - name: Install Dependencies
        run: cd ./frontend && npm ci

      - name: Build frontend with Angular
        run: cd ./frontend && npm run build

      - name: Build backend with Maven
        run: mvn -B clean package --file pom.xml -P build-for-docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build the docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          tags: ${{ needs.read-version.outputs.okr-docker-image}}
          load: true
          push: false
          outputs: type=docker,dest=/tmp/okr-docker-image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: okr-image
          path: /tmp/okr-docker-image.tar

#  create-release:
#    runs-on: ubuntu-24.04
#    needs: update-version
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          ref: ${{ needs.update-version.outputs.COMMIT_HASH }}
#
#      - name: Create git tag
#        run: |
#          git tag ${{ needs.update-version.outputs.SEMVER_VERSION }}
#      - name: Push git tag
#        run: git push origin ${{ needs.update-version.outputs.SEMVER_VERSION }}
#
#      - name: Create release
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          tag: ${{ github.ref_name }}
#        run: |
#          gh release create "${{ needs.update-version.outputs.SEMVER_VERSION }}" \
#              --repo="$GITHUB_REPOSITORY" \
#              --title="Release ${GITHUB_REPOSITORY#*/} ${{ needs.update-version.outputs.SEMVER_VERSION }}" \
#              --generate-notes